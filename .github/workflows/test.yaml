name: Test

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      coverage:
        required: false
        type: boolean
        default: false
      os:
        required: false
        type: string
        default: "ubuntu-latest"

jobs:
  test:
    runs-on: ${{ inputs.os }}
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.0
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        if: runner.os != 'Windows'
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: v1-venv-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Load cached pip wheels
        if: runner.os == 'Windows'
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: cache-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Set pythonpath
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Test
        if: ${{ !inputs.coverage }}
        run: |
          source $VENV
          pytest
      - name: Test with coverage
        if: inputs.coverage
        run: poetry run pytest tests --cov=app --cov-report=xml
      - uses: actions/upload-artifact@v3
        if: inputs.coverage
        with:
          name: coverage-xml
          path: coverage.xml
